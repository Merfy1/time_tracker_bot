import logging
import random
import requests
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from config import TELEGRAM_TOKEN
from database import create_connection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_random_image():
    dog_api = "https://random.d–æg/woof.json"
    cat_api = "https://api.thecatapi.com/v1/images/search"
    try:
        response = requests.get(dog_api, timeout=5)
        if response.status_code == 200:
            image_url = response.json().get("url")
            if image_url:
                return image_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å API —Å–æ–±–∞–∫: {e}")

    # –ï—Å–ª–∏ API —Å–æ–±–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∫–æ—Ç–∏–∫–æ–≤
    try:
        response = requests.get(cat_api, timeout=5)
        if response.status_code == 200:
            image_url = response.json()[0].get("url")
            if image_url:
                return image_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å API –∫–æ—Ç–æ–≤: {e}")

    # –ï—Å–ª–∏ –≤—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return "https://placekitten.com/400/400"

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

    buttons = [
        [KeyboardButton("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
        [KeyboardButton("üîë –í–æ–π—Ç–∏")],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext):
    user = update.message.from_user
    chat_id = update.message.chat_id
    text = update.message.text

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if text == "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        context.user_data["is_registering"] = True
        return

    if context.user_data.get("is_registering"):
        full_name = update.message.text
        unique_code = f"CODE-{random.randint(1000, 9999)}"

        connection = create_connection()
        cursor = connection.cursor()

        try:
            cursor.execute("SELECT * FROM employees WHERE full_name = ?", (full_name,))
            result = cursor.fetchone()

            if result:
                update.message.reply_text(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò–û —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –§–ò–û –∏–ª–∏ –≤–æ–π—Ç–∏."
                )

                buttons = [[KeyboardButton("üîë –í–æ–π—Ç–∏")]]
                reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

                return  

            cursor.execute("INSERT INTO employees (full_name, unique_code) VALUES (?, ?)", (full_name, unique_code))
            connection.commit()

            update.message.reply_text(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤–æ–π –∫–æ–¥: {unique_code}")

            buttons = [[KeyboardButton("üîë –í–æ–π—Ç–∏")]]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
            update.message.reply_text("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–æ–π—Ç–∏:", reply_markup=reply_markup)

            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (–ö–æ–¥: {unique_code})")

            connection.close()
            context.user_data["is_registering"] = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

        return

    # –í—Ö–æ–¥
    if text == "üîë –í–æ–π—Ç–∏":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:")
        context.user_data["is_logging_in"] = True
        return

    if context.user_data.get("is_logging_in"):
        entered_code = update.message.text
        connection = create_connection()
        cursor = connection.cursor()

        try:
            cursor.execute("SELECT * FROM employees WHERE unique_code = ?", (entered_code,))
            result = cursor.fetchone()

            if result:
                update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {result[1]}! –¢—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª. –ù–∞—á–∏–Ω–∞–π —Å–º–µ–Ω—É!")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_url = get_random_image()
                update.message.reply_photo(photo=image_url)

                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {result[1]} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É (–ö–æ–¥: {entered_code})")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                context.user_data["employee_id"] = result[0]

                buttons = [[KeyboardButton("üîõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")]]
                reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
                update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É.", reply_markup=reply_markup)

            else:
                update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º: {entered_code}")

            connection.close()
            context.user_data["is_logging_in"] = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
            update.message.reply_text("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    # –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É
    if text == "üîõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É":
        employee_id = context.user_data.get("employee_id")
        if not employee_id:
            update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏.")
            return

        connection = create_connection()
        cursor = connection.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞
            cursor.execute(
                "SELECT * FROM shifts WHERE employee_id = ? AND end_time IS NULL",
                (employee_id,)
            )
            existing_shift = cursor.fetchone()

            if existing_shift:
                update.message.reply_text("–¢—ã —É–∂–µ –Ω–∞ —Å–º–µ–Ω–µ.")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É
            cursor.execute(
                "INSERT INTO shifts (employee_id, start_time) VALUES (?, ?)",
                (employee_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            connection.commit()

            update.message.reply_text("–°–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

            logger.info(f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}")

            connection.close()

            buttons = [[KeyboardButton("üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É")]]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            update.message.reply_text("–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã: {e}")
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É.")

    # –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É
    if text == "üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É":
        employee_id = context.user_data.get("employee_id")
        if not employee_id:
            update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏.")
            return

        connection = create_connection()
        cursor = connection.cursor()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É
            cursor.execute(
                "SELECT id, start_time FROM shifts WHERE employee_id = ? AND end_time IS NULL",
                (employee_id,)
            )
            shift = cursor.fetchone()

            if not shift:
                update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            shift_id, start_time_str = shift
            start_time = datetime.strptime(start_time_str, "%Y-%m-%d %H:%M:%S")
            end_time = datetime.now()

            duration_minutes = int((end_time - start_time).total_seconds() / 60)
            salary = duration_minutes * 2

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            cursor.execute(
                "UPDATE shifts SET end_time = ? WHERE id = ?",
                (end_time.strftime("%Y-%m-%d %H:%M:%S"), shift_id)
            )
            connection.commit()

            update.message.reply_text(
                f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                f"üïí –í—Ä–µ–º—è –Ω–∞ —Å–º–µ–Ω–µ: {duration_minutes} –º–∏–Ω\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {salary} —Ä—É–±"
            )

            buttons = [[KeyboardButton("üîõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")]]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            update.message.reply_text("–ì–æ—Ç–æ–≤ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
