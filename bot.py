import logging
from telegram import ParseMode
import random
import os
from config import ADMIN_ID
import requests
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from config import TELEGRAM_TOKEN
from database import create_connection
from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)


def get_random_image(query="office work team coffee"):
    access_key = os.getenv("UNSPLASH_ACCESS_KEY")
    url = "https://api.unsplash.com/photos/random"
    params = {
        "query": query,
        "client_id": access_key,
        "orientation": "landscape"
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        return data['urls']['regular']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    buttons = [[KeyboardButton("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")], [KeyboardButton("üîë –í–æ–π—Ç–∏")]]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

def send_shift_status(update, context):
    employee_id = context.user_data.get("employee_id")
    connection = create_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT id, start_time FROM shifts WHERE employee_id = ? AND end_time IS NULL", (employee_id,))
        shift = cursor.fetchone()
        if not shift:
            update.message.reply_text("–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã.")
            return

        shift_id, start_time_str = shift
        start_time = datetime.strptime(start_time_str, "%Y-%m-%d %H:%M:%S")
        now = datetime.now()
        duration = int((now - start_time).total_seconds() / 60)

        cursor.execute("SELECT COUNT(*) FROM breaks WHERE shift_id = ? AND end_time IS NOT NULL", (shift_id,))
        break_count = cursor.fetchone()[0]

        message = (
            f"üïì –°–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å: {start_time.strftime('%H:%M:%S')}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n"
            f"‚òï –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {break_count}"
        )

        buttons = [
            [KeyboardButton("üîÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤")] if context.user_data.get("on_break") else [KeyboardButton("‚òï –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤")],
            [KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É"), KeyboardButton("üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        update.message.reply_text(message, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã: {e}")
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã.")
    finally:
        connection.close()

def handle_message(update: Update, context: CallbackContext):
    user = update.message.from_user
    chat_id = update.message.chat_id
    text = update.message.text

    if text == "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        context.user_data["is_registering"] = True
        return

    if context.user_data.get("is_registering"):
        full_name = update.message.text
        unique_code = f"CODE-{random.randint(1000, 9999)}"
        connection = create_connection()
        cursor = connection.cursor()
        try:
            cursor.execute("SELECT * FROM employees WHERE full_name = ?", (full_name,))
            result = cursor.fetchone()
            if result:
                update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò–û —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                buttons = [[KeyboardButton("üîë –í–æ–π—Ç–∏")]]
                reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
                return
            cursor.execute("INSERT INTO employees (full_name, unique_code) VALUES (?, ?)", (full_name, unique_code))
            connection.commit()
            update.message.reply_text(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤–æ–π –∫–æ–¥:\n`{unique_code}`", parse_mode=ParseMode.MARKDOWN)
            buttons = [[KeyboardButton("üîë –í–æ–π—Ç–∏")]]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
            update.message.reply_text("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–æ–π—Ç–∏:", reply_markup=reply_markup)
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (–ö–æ–¥: {unique_code})")
            connection.close()
            context.user_data["is_registering"] = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if text == "üîë –í–æ–π—Ç–∏":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:")
        context.user_data["is_logging_in"] = True
        return

    if context.user_data.get("is_logging_in"):
        entered_code = update.message.text
        connection = create_connection()
        cursor = connection.cursor()
        try:
            cursor.execute("SELECT * FROM employees WHERE unique_code = ?", (entered_code,))
            result = cursor.fetchone()
            if result:
                update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {result[1]}! –¢—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª. –ù–∞—á–∏–Ω–∞–π —Å–º–µ–Ω—É!")
                image_url = get_random_image("office discipline")
                if image_url:
                    update.message.reply_photo(photo=image_url)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {result[1]} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É (–ö–æ–¥: {entered_code})")
                context.user_data["employee_id"] = result[0]
                context.user_data["is_logging_in"] = False  # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ

                buttons = [
                    [KeyboardButton("üîõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω")]
                ]
                reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
                update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É.", reply_markup=reply_markup)
            else:
                update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
                logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º: {entered_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
            update.message.reply_text("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        finally:
            connection.close()
        return


    # –í –±–ª–æ–∫–µ "üîõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É":
    if text == "üîõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É":
        employee_id = context.user_data.get("employee_id")
        if not employee_id:
            update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏.")
            return

        connection = create_connection()
        cursor = connection.cursor()
        try:
            cursor.execute("SELECT * FROM shifts WHERE employee_id = ? AND end_time IS NULL", (employee_id,))
            if cursor.fetchone():
                update.message.reply_text("–¢—ã —É–∂–µ –Ω–∞ —Å–º–µ–Ω–µ.")
                send_shift_status(update, context)  # –ü–æ–∫–∞–∂–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É, –µ—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
                return

            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("INSERT INTO shifts (employee_id, start_time) VALUES (?, ?)", (employee_id, now))
            connection.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
            cursor.execute("SELECT full_name FROM employees WHERE id = ?", (employee_id,))
            full_name = cursor.fetchone()[0]

            update.message.reply_text("–°–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
            logger.info(f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            context.bot.send_message(
                chat_id=int(ADMIN_ID),
                text=f"üîî –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {full_name} –Ω–∞—á–∞–ª —Å–º–µ–Ω—É."
            )

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –∏ –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            send_shift_status(update, context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã: {e}")
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É.")
        finally:
            connection.close()
        return
    if text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É":
        send_shift_status(update, context)
    if text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω":
        employee_id = context.user_data.get("employee_id")
        if not employee_id:
            update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏.")
            return
        connection = create_connection()
        cursor = connection.cursor()
        try:
            cursor.execute("""
                SELECT start_time, end_time, total_break_delay 
                FROM shifts 
                WHERE employee_id = ? AND end_time IS NOT NULL
                ORDER BY start_time DESC
            """, (employee_id,))
            shifts = cursor.fetchall()
            if not shifts:
                update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω –ø—É—Å—Ç–∞—è.")
                return

            total_earnings = 0
            message_lines = ["üìú *–ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω:*"]
            for start_str, end_str, break_delay in shifts:
                start_dt = datetime.strptime(start_str, "%Y-%m-%d %H:%M:%S")
                end_dt = datetime.strptime(end_str, "%Y-%m-%d %H:%M:%S")
                duration = int((end_dt - start_dt).total_seconds() / 60)  # –º–∏–Ω
                break_delay = break_delay or 0
                salary = (duration - break_delay) * 2
                total_earnings += salary
                message_lines.append(f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')} - {end_dt.strftime('%H:%M')}, "
                                     f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω, –ü–µ—Ä–µ—Ä—ã–≤—ã: {break_delay} –º–∏–Ω, –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {salary} —Ä—É–±")

            message_lines.append(f"\nüí∞ *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {total_earnings} —Ä—É–±")
            update.message.reply_text("\n".join(message_lines), parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω: {e}")
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º–µ–Ω.")
        finally:
            connection.close()
        return

    if text == "‚òï –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤":
        employee_id = context.user_data.get("employee_id")
        connection = create_connection()
        cursor = connection.cursor()
        image_url = get_random_image("coffee break")
        if image_url:
            update.message.reply_photo(photo=image_url)
        try:
            cursor.execute("SELECT id FROM shifts WHERE employee_id = ? AND end_time IS NULL", (employee_id,))
            shift = cursor.fetchone()
            if not shift:
                update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å–º–µ–Ω—É.")
                return
            shift_id = shift[0]

            cursor.execute("SELECT * FROM breaks WHERE shift_id = ? AND end_time IS NULL", (shift_id,))
            if cursor.fetchone():
                update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –∏–¥—ë—Ç –ø–µ—Ä–µ—Ä—ã–≤.")
                return
            
            cursor.execute("INSERT INTO breaks (shift_id, start_time) VALUES (?, ?)",
                           (shift_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            connection.commit()
            update.message.reply_text("–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞–ª—Å—è!")
            logger.info(f"–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞—Ç –¥–ª—è —Å–º–µ–Ω—ã {shift_id}")

            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤"
            buttons = [[KeyboardButton("üîÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤")]]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞: {e}")
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤.")
        finally:
            connection.close()
    if text == "üîÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤":
        employee_id = context.user_data.get("employee_id")
        connection = create_connection()
        cursor = connection.cursor()
        try:
            cursor.execute("SELECT id FROM shifts WHERE employee_id = ? AND end_time IS NULL", (employee_id,))
            shift = cursor.fetchone()
            if not shift:
                update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å–º–µ–Ω—É.")
                return
            shift_id = shift[0]

            cursor.execute("SELECT id, start_time FROM breaks WHERE shift_id = ? AND end_time IS NULL", (shift_id,))
            brk = cursor.fetchone()
            if not brk:
                update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            break_id, start_time_str = brk
            start_time = datetime.strptime(start_time_str, "%Y-%m-%d %H:%M:%S")
            end_time = datetime.now()
            duration = int((end_time - start_time).total_seconds() / 60)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
            cursor.execute("UPDATE breaks SET end_time = ?, delay_minutes = ? WHERE id = ?",
                        (end_time.strftime("%Y-%m-%d %H:%M:%S"), duration, break_id))
            connection.commit()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
            exceed = max(0, duration - 15)
            amount = exceed * 10  # 10 —Ä—É–±/–º–∏–Ω—É—Ç–∞

            if exceed > 0:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ Telegram ID
                cursor.execute("SELECT full_name, telegram_id FROM employees WHERE id = ?", (employee_id,))
                emp_data = cursor.fetchone()
                full_name, employee_telegram = emp_data if emp_data else ("<–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π>", None)

                # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ
                cursor.execute("""
                    INSERT INTO penalties (employee_id, shift_id, amount, reason)
                    VALUES (?, ?, ?, ?)
                """, (employee_id, shift_id, amount, f"–ü–µ—Ä–µ—Ä—ã–≤ –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ {exceed} –º–∏–Ω—É—Ç"))
                connection.commit()

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
                if employee_telegram:
                    context.bot.send_message(
                        chat_id=employee_telegram,
                        text=f"‚ö†Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ {exceed} –º–∏–Ω.\n–®—Ç—Ä–∞—Ñ: {amount} —Ä—É–±"
                    )

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üì£ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {full_name} –ø—Ä–µ–≤—ã—Å–∏–ª –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {exceed} –º–∏–Ω.\n–®—Ç—Ä–∞—Ñ: {amount} —Ä—É–±"
                )

            # –û—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            if exceed > 0:
                update.message.reply_text(
                    f"–ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω.\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω.\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ: {exceed} –º–∏–Ω\nüí∏ –®—Ç—Ä–∞—Ñ: {amount} —Ä—É–±"
                )
            else:
                update.message.reply_text(f"–ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω.")

            logger.info(f"–ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Å–º–µ–Ω—ã {shift_id}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω.")

            # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞
            buttons = [
                [KeyboardButton("‚òï –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤")],
                [KeyboardButton("üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞: {e}")
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤.")
        finally:
            connection.close()

    if text == "üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É":
        employee_id = context.user_data.get("employee_id")
        if not employee_id:
            update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏.")
            return
        connection = create_connection()
        cursor = connection.cursor()
        try:
            cursor.execute("SELECT id, start_time FROM shifts WHERE employee_id = ? AND end_time IS NULL", (employee_id,))
            shift = cursor.fetchone()
            if not shift:
                update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            shift_id, start_time_str = shift
            start_time = datetime.strptime(start_time_str, "%Y-%m-%d %H:%M:%S")
            end_time = datetime.now()
            duration_minutes = int((end_time - start_time).total_seconds() / 60)
            cursor.execute("SELECT SUM(delay_minutes) FROM breaks WHERE shift_id = ?", (shift_id,))
            total_break_delay = cursor.fetchone()[0] or 0
            salary = (duration_minutes - total_break_delay) * 2
            cursor.execute("UPDATE shifts SET end_time = ?, total_break_delay = ? WHERE id = ?",
                           (end_time.strftime("%Y-%m-%d %H:%M:%S"), total_break_delay, shift_id))
            connection.commit()
            update.message.reply_text(
                f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                f"üïí –í—Ä–µ–º—è –Ω–∞ —Å–º–µ–Ω–µ: {duration_minutes} –º–∏–Ω\n"
                f"üßò –ü–µ—Ä–µ—Ä—ã–≤—ã: {total_break_delay} –º–∏–Ω\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {salary} —Ä—É–±"
            )
            cursor.execute("SELECT full_name FROM employees WHERE id = ?", (employee_id,))
            full_name = cursor.fetchone()[0]

            context.bot.send_message(
                chat_id=int(ADMIN_ID),
                text=f"üîî –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {full_name} –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É."
            )
            buttons = [
                [KeyboardButton("üîõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")],
                [KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω")]
            ]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            update.message.reply_text("–ì–æ—Ç–æ–≤ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É.")
        finally:
            connection.close()
        return

def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
